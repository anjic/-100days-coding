Ad-hoc Vs Playbook:
----------------------
ad-hoc: like similar to single bash command
Playbook: similar bash script

Ad-hoc ansible command:
---------
$ ansible httpd -i /ansible/inv.ini -b -m yum -a "name=httpd state=latest" -f 100

# File module
-------
$ ansible <hostname/group-name in inventory file> -i inv.ini -m file -a "path=/home/user/newfile state=touch"

# To get the properties of the file
$ ansible <hostname/group-name in inventory file> -i inv.ini -m file -a "path=/home/user/newfile"

# It gives 'error/absent' when you pass command without having 'state' for new file.
$ ansible <hostname/group-name in inventory file> -i inv.ini -m file -a "path=/home/user/newfile2"

# To change file mode of the file
$ ansible <hostname/group-name in inventory file> -i inv.ini -m file -a "path=/home/user/newfile mode=0400"

# To change owner mode of the file, todo this u have to use/pass become flag(-b)
$ ansible <hostname/group-name in inventory file> -i inv.ini -b -m file -a "path=/home/user/newfile owner=root"

#user Module:
-------------
# create user
$ ansible <hostname/group-name in inventory file> -i inv.ini -b -m user -a "name=anji"

# Create/adding secondary group
$ ansible httpd -i inv.ini -b -m user -a "name=anji append=yes groups=wheel"

Inventory supports both INI and YAML formats:
-----------

inventory.yaml:
--------
all:
  hosts:
    <host-names>
  children:
    httpd:
      hosts:
      <host-name>
    labservers:
      hosts:
        <host-name>

$ ansible -i inventory.yaml labservers -m setup

Dynamic inventory:
------
- specificing an executable file as the inventory is considered a dynamic inventory
- JSON o/p is executable to be returned to STDOUT from the executable.
- The implementation(python,java,C,bash..etc)
- the program/script must respond to two possible parameters(--list,--host)
- The program script must return JSON in the format Ansible is expecting
- Donot forget to make the file executable
  -chmod +x dynamic.py
-Using dynamic inventories, you can pull inventory information from
  - cloud provider
  - LDAP
  - Cobbler
  - CMDB software

- $ cd /scripts
  vi dynamic.py
  $ chmod +x dynamic.py
  $ ansible all -i dynamic.py -m ping


Playbook:
----------
- Plays map a group of hosts to well-defined role
- Playboooks are used to orchestrate more complex activities, such as system or application deployment

example of Playbook:
------------------
$ vim demo.yml 

---
- hosts: webservers
  become:yes # to become root user or
  remote_user: root
  tasks:
    - name: install apache is at the latest version
      yum: 
        name: httpd
        state: latest
    - name: start apache service
      service:
        name: httpd
        state: started
        enable: yes
    - name: create index.html
      file:
        path: /var/ww/html/index.html
        state: touch
    - name: add a line to index.html
      lineinfile:
        path: /var/ww/html/index.html
        line: "Hello World"
    - name: write the apache config file
      template: src=/srv/httpd.j2 dest=/etc/httpd.conf

- hosts: databases
  remote_user: root

  tasks:
    - name: install postgresql is at latest version
      yum: name=postgresql state=latest
    - name: ensure postgresql is started
      service: name=postgresql state=started

$ ansible-playbook demo.yml

$ ansible-playbook demo.yml --limit <host-name full name>

Variables in playbook, Use variables to Retrieve the Results of Running Commands:
------------------
# used "register" keyword for declared variables
# debug module, is print the logs/entire playbook executed logs
$ vi reg.yml

---
- hosts: local/<host-name>/<group-name>
  tasks:
    - name: create a file
      file: 
        path: /tmp/newfile
        state: touch
      register: output
    - debug: msg="Registry output is{{output}}"
    - name: edit file
      lineinfile:
        path: /tmp/newfile
        line: "{{output.uid}}"
    - name: copy a file
      copy:
        src: testfile
        dest: /home/user/test-registry
        mode: 400
      register: var
    - name: output debug info
      debug: msg="debug info is {{var}}"

$ ansible-playbook reg.yml

# Conditionals to Control Play Execution
-------------
# handlers, here restating apache service when config file changes occurs

$ vi  handler.yml

---
- hosts: <host name>
  become: yes
  handler:
    - name: restart apache
      service: name="httpd" state="restarted"
      listen: "restart apache"
  tasks:
    - name: change config
      replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: "^DocumentRoot.*$"
        replace: "DocumentRoot '/opt/www'"
        backup: yes
      notify: "restart apache"

# When, it is used like 'if' condition
ex: $ vi when.yml

---
- hosts: local/<host-name>/<group-name as inventory>
  become: yes
  tasks:
    - name: edit index
      lineinfile:
        path: /var/www/html/index.html
        line: "I'm Anjaneyulu"
      when:
        - ansible_hostname == "<some-value>"

# with_items, it is loop
ex: $ vi user.yml

---
- hosts: local
  become: yes
  tasks:
    - name: create users
      user: "{{item}}"
    with_items:
      - sam
      - gopi
      - karthi

# with_files, is also loop through files

ex: $ vi user.yml

---
- hosts: local
  become: yes
  tasks:
    - name: copy files
      copy:
        src: "{{file}}"
        dest: "/home/user/{{file}}"
        mode: 400
    with_files:
      - text.txt
      - text.py
      - test.java

#Error Handling
----------------
1. Ignore acceptable errors
2. Define failure condition
3. Define "Changed"
4. handling blocks

Ex:  $ vi error.yml

---
- hosts: local
  tasks:
   - name: get files
     get_url:
       url: "http://{{item}}/index.html"
       dest: "/tmp/{{item}}"
    ignore_errors: yes
    with_items:
      - hostname1
      - hostname2
      - hostname3

Ex: $ block.yml

---
- hosts: local
  tasks:
    - name: get files
      block:
        - get_url:
            url: "http://scoldam6/index.html"
            dest: "/tmp/idex_file"
      resuce: 
        - debug: msg="The file doesn't exists"
      always:
        - debug: msg="playbooks run success"

Note: before running the above playbook, stop apache servcie atleast in a server. Just for validation ignore

#playbook tags/versioning:
--------------------------
$ vi deploy.yml

---
- hosts: web
  become: yes
  tasks:
  - name: deploy app binary
    copy:
      src: /home/user/apps/hello
      dest: /var/www/html/hello
    tags:
      - webdeploy
- hosts: db
  become: yes
  tasks:
  - name: deploy db script
    copy:
      src: /home/user/app/script.sql
      dest: /opt/db/scripts/script.sql
    tags:
    - dbdeploy

# running /executing entire playbook
$ ansible-playbook deploy.yml

# running /executing entire playbook tags
$ ansible-playbook <playbook-name> --tags <name of tags>
$ ansible-playbook deploy.yml --tags dbdeploy
$ ansible-playbook deploy.yml --tags webdeploy